@using GolfClubApp.Data
@using GolfClubApp.Shared
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Forms

@page "/teemanager/new/{teeId}"
@page "/teemanager/{Id}"



<h3>Booking</h3>

@if (Edited != null)
{
    <EditForm Model="@Edited" OnValidSubmit="@SaveBooking">
        <div class="input-group">
            <span class="input-group-text">Booking date and time</span>
            <InputDate class="form-control" @bind-Value="@BookingDate"></InputDate>
            <InputSelect class="form-control" @bind-Value="@BookingTime">
                @foreach (var option in GetTimeIntervals())
                {
                    <option value="@option">@option</option>
                }
            </InputSelect>
        </div>
        <div>
            @foreach (var g in Edited.Golfers)
            {
                <i>@g.ToString()</i>
                <br />
            }
        </div>

        <div class="input-group m-3">
            <span class="input-group-text">Golfers</span>

            <InputSelect class="form-control" @bind-Value="@SelectedGolfer">
                @foreach (var selectableGolfer in SelectableGolfers)
                {
                    <option value="@selectableGolfer.Id">@selectableGolfer.ToString()</option>
                }
            </InputSelect>
            <button type="button" class="btn btn-primary" onclick="@AddGolfer">Add player</button>
        </div>


        <button type="submit" class="btn btn-primary">Confirm</button>
    </EditForm>
}

@code {

    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string teeId { get; set; }
    [Inject]
    public IGolfRep GolfRepository { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public IJSRuntime JsRuntime { get; set; }

    private TeeBooking Edited;

    private List<Golfer> Golfers = new();
    private List<Golfer> SelectableGolfers =>
        new(Golfers.Where(g => Edited.Golfers.Any(sg => sg.Id == g.Id) == false));

    private Golfer SelectedGolfer;
    protected override async Task OnInitializedAsync()
    {
        if (Id is not null && int.TryParse(Id, out var _id))
        {
            Edited = await GolfRepository.GetTeeBooking(_id);
            BookingDate = DateOnly.FromDateTime(Edited.BookingTime);
            BookingTime = TimeOnly.FromDateTime(Edited.BookingTime);
        }
        else
        {
            Edited = new TeeBooking();
            Edited.BookedTee = await GolfRepository.GetTee(int.Parse(teeId));
            Edited.Golfers = new();
            Edited.BookingTime = DateTime.Now.AddDays(1);
        }
        Golfers.AddRange(await GolfRepository.GetAllGolfers());

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (SelectableGolfers.Any())
        {
            SelectedGolfer = SelectableGolfers.First();
        }
    }

    async Task SaveBooking()
    {
        Edited.BookingTime = new DateTime(BookingDate.Year, BookingDate.Month, BookingDate.Day, BookingTime.Hour,
            BookingTime.Minute, BookingTime.Second);
        await GolfRepository.SaveTeeBooking(Edited);
        NavigationManager.NavigateTo($"/tee_detailed/{Edited.Id}");
    }
    DateOnly BookingDate { get; set; } = DateOnly.FromDateTime(DateTime.Now.AddDays(1));
    TimeOnly BookingTime { get; set; } = new(10, 0, 0);
    List<TimeOnly> GetTimeIntervals()
    {
        var intervals = new List<TimeOnly>();
        var startTime = new TimeOnly(8, 0);

        for (int i = 0; i < 40; i++)
        {
            intervals.Add(startTime);
            startTime = startTime.AddMinutes(15);
        }
        return intervals;
    }

    async Task AddGolfer()
    {
        if (SelectedGolfer == null)
        {
            await JsRuntime.InvokeVoidAsync("showalert", "Please Choose a player");
        }
        else if (Edited.Golfers.Count >= 4)
        {
            await JsRuntime.InvokeVoidAsync("showalert", "No more players allowed, Sorry !");
        }
        else
        {
            Edited.Golfers.Add(SelectedGolfer);
        }

    }

    void RemoveGolfer()
    {


    }

}